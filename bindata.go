// Code generated by go-bindata.
// sources:
// public/index.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _publicIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x58\x6d\x6f\x23\xb7\x11\xfe\xae\x5f\x31\xe1\xa1\x81\x1c\x9f\x76\xe5\xb3\xaf\xbd\x5b\x6b\x5d\xa4\x97\xa0\x97\x22\xcd\x05\xb0\x8b\x22\x28\xfa\x81\xbb\x1c\xad\x68\x73\xc9\x05\xc9\x95\xac\x14\xfe\xef\x05\xb9\xef\x2f\x92\x7b\xfd\xe4\xf5\x70\xde\x9e\x87\x33\x43\x52\x9b\x6f\x7e\xf8\xf2\xe9\xe1\xb7\x5f\x7f\x84\x9d\xcd\xc5\xdd\x62\xe3\xfe\x80\xa0\x32\x8b\x09\x4a\xe2\x04\x48\xd9\xdd\x02\x60\x63\xb9\x15\x78\xf7\x99\x9a\x1d\xff\xb4\xa3\x76\x13\x56\x82\x85\x5b\x33\xf6\x28\x10\xec\xb1\xc0\x98\x58\x7c\xb6\x61\x6a\x0c\x81\x1c\x19\xa7\x31\x31\xa9\x46\xef\x0b\x00\x7c\x18\xf8\x8f\xff\x04\x50\x7b\xd4\x5b\xa1\x0e\x11\xec\x38\x63\x28\x6f\x6b\x79\xa2\x9e\x57\x86\xff\xce\x65\x16\x41\xa2\x34\x43\xbd\x4a\xd4\x73\xb3\xba\x43\x9e\xed\x6c\x04\x57\xeb\xf5\x1f\x1a\xd9\x81\x33\xbb\xeb\x8b\x5e\x16\xfe\xcf\x77\x6f\xe1\xbb\x28\xc1\xad\xd2\xe8\xbe\xe8\xd6\xa2\x6e\xc3\xf7\xc3\x70\xb9\x43\xcd\xed\xc0\x38\x51\xec\xd8\x2a\x6f\x95\xb4\xab\x2d\xcd\xb9\x38\x46\xf0\x19\xc5\x1e\x2d\x4f\xe9\xed\x2b\x48\x0a\xca\x98\xf7\x7f\xbd\x2e\x9e\x47\xc2\x55\xa2\xac\x55\xb9\xcf\xba\x5b\xcc\xa9\xce\xb8\x8c\x60\x7d\x12\xda\x1c\x03\x75\xc6\x81\xcb\x43\xd0\x2e\xeb\x84\xa6\x4f\x99\x56\xa5\x64\x11\xbc\x59\xaf\x5b\xa7\xa9\x12\x4a\x47\xf0\x66\xbb\xdd\xb6\x10\x0a\x9a\x72\x7b\x8c\x60\x1d\xfc\xa9\xcd\x54\x19\x6e\xb9\x92\x11\xd0\xc4\x28\x51\x5a\xbc\x5d\x9c\xd9\x05\xc1\x25\xae\xe6\x16\x5c\x4d\xac\xa8\xe0\x99\x8c\x20\x45\x69\x51\xdf\xf6\x69\x35\xfc\x77\x8c\xe0\xfd\x0c\x45\x56\x15\x11\xdc\x38\x47\x8d\x27\x27\x68\x61\xe8\x2a\xd4\xba\x2b\x9c\x8a\xd1\x56\x20\x70\xdb\xad\xd7\x24\xbd\x11\x2a\x9b\x25\xe8\xb0\xe3\x0e\xe0\x89\x7d\x98\xc3\x55\x29\xb5\x1b\xf9\xae\x87\xa0\xab\x08\x5a\x5a\x35\xdc\xa5\xdc\x74\x09\xb4\x15\xf2\xbe\x78\xee\x82\x8d\x1c\x5f\x77\x7e\x53\x81\x54\xbb\xb6\xb0\xbb\xa1\xd3\x4c\xd3\x3d\xb5\xb4\x2b\xef\xad\x50\xd4\x46\x9e\x82\x91\x5b\xdd\x20\xe9\xdc\x56\x6d\x16\xc1\x55\xf1\x0c\x46\x09\xce\xe0\xcd\xc7\x8f\x1f\x87\xab\x2b\x4d\x19\x2f\x4d\x04\x37\x93\x8d\x8a\xe0\x5d\x23\x6b\xf2\xa1\x52\xaa\x52\xa6\x38\xec\xa0\x6a\xab\xaf\xde\x75\x1e\x2a\xb1\x1b\x20\x11\x70\x4b\x05\x4f\x5f\xaf\x9a\x36\xea\xd5\x4d\xc7\x5a\x13\xb8\x34\xa8\x25\xcd\xbb\xc0\x4d\xb1\x5f\x5f\x5f\x37\x0e\x18\x37\x85\xa0\x47\xd7\xf7\xbe\x68\x13\xa1\xd2\xa7\x41\x46\x87\x7a\xbb\x13\x25\xd8\x88\x3e\x5f\x83\xd7\xe3\x96\x6d\x58\xbd\x99\x2c\x34\xbb\xf8\x7e\x4c\x91\xe5\x39\x1a\x4b\xf3\x62\x92\x2a\xa5\x74\xa6\x43\x26\xb4\x35\x49\x4a\xa5\x73\x2a\x46\x45\x86\xc6\xd0\xac\x63\xa1\x85\xdc\xc3\xda\x74\x84\x63\xba\x37\x16\xab\x52\x78\xd7\x95\x02\x63\xec\xf5\x52\x98\xa1\x59\x95\xd6\xd1\xeb\x12\x94\x38\x0f\xc8\x4e\xf7\xf4\xba\x78\x86\xab\x0f\x9d\xe3\x53\xc3\xdd\xa7\x1d\x6d\x55\x5a\x9a\x73\xc9\xb7\x5c\xbe\xb8\xa3\x2a\xf4\xa5\x56\x1f\x5b\xa9\xe6\x85\xed\x9f\x5b\x8f\x74\x4f\x2b\x69\x7d\x5e\x1d\xb8\x64\xea\x10\x28\x29\x14\x65\x10\xc3\xb6\x94\xa9\x9b\x88\xb0\xbc\x68\x63\x02\xec\xa9\x86\x54\xc9\x76\xec\x57\x12\xd7\xe6\x31\x30\x95\x96\x39\x4a\x1b\x64\x68\x7f\x14\xe8\x3e\xff\x72\xfc\x89\x2d\x7d\x40\x72\x31\x34\x71\xa3\xe9\x8c\x89\x50\x99\xb3\x68\x4d\xda\x6c\x68\x51\xa0\x64\x3f\xab\x6c\xc9\x2d\xe6\xfd\xd4\x2a\xbf\x4c\xdd\xa7\x5a\x09\x01\xb1\x0b\x11\x18\xff\xcf\x83\x2a\x20\x8e\xfb\x92\xcf\xbe\x9e\x60\xe5\x45\xa9\xe0\x28\x6d\x25\xba\xed\xf9\x73\x6b\x55\xbc\x4f\x3b\x2e\x58\x15\xb1\xaf\xc0\xb7\xb0\x6c\x02\x0e\x53\x81\x71\xf4\xaf\x8d\xfd\xb2\xe8\xbe\xa6\x2c\xd4\x25\xfe\x7d\x3d\x79\x96\x2a\x79\x9c\x52\xd1\xce\xa5\x1e\xcf\xa9\x46\x6a\xb1\xa6\x7a\x49\x18\xdf\x93\x01\xa2\xc6\x26\x48\x05\x35\xe6\x17\x37\x5c\x2e\x63\x20\x8d\x98\xcc\xea\x72\x29\x51\x3f\xb8\xce\x8a\x41\x25\x8f\x4d\x43\x0e\x74\xdb\x6d\x6b\xac\x2e\xfe\x17\x80\x7f\xaf\x3c\xcd\xe3\xe3\x79\x76\x06\x1a\xcf\xb3\x21\x34\x9e\x67\x23\x54\xcd\x41\x42\xc6\x6a\x46\xa7\x10\x03\xd9\x59\x5b\x44\x61\x78\x38\x1c\xda\x33\x27\x48\x55\x1e\x56\x9f\x21\xb9\xf4\x60\xd9\xfb\x4b\xf2\x67\x13\xdf\x7c\xf8\x96\xc5\x9c\xa1\xb4\x3c\x55\xf2\x5b\x1d\xff\xfa\xd7\x89\xdf\xea\x64\x75\xae\x6f\x3e\x4c\x16\x7d\xf3\xb7\x6b\x23\xac\xed\xa8\x3f\x0d\xd8\x14\x54\x0e\x11\x37\x46\x23\xd8\x8d\x98\xcc\xea\x8e\x37\xb3\x59\x98\xa4\xe4\x86\x84\xc4\x03\xfc\x40\x2d\x2e\x07\x71\xdd\x6a\x37\xf1\x4f\x67\xec\x74\x86\x19\xb7\x56\xa3\x94\x5b\x39\x99\xd7\x36\x68\xbf\xb7\x56\xf3\xa4\xb4\xb8\x24\x8c\x5a\xf4\xbe\xdf\x02\x3b\xe1\xbe\x8f\x12\x58\x60\xd5\xcf\x2a\xa5\x02\x1f\x78\x8e\xf7\x56\x73\x99\x2d\x2f\x26\x80\x9b\x73\xe6\x2b\xda\xa9\x36\x19\xa1\xa9\xa5\x64\x4e\xf3\x64\x2f\x8d\x93\x31\xe7\x8a\x7f\x9a\x88\x19\x17\x7f\x6e\xb2\x61\x99\x39\x95\xc1\xb4\xcb\xb3\x89\x8b\xfe\x7a\x53\x18\x67\x95\x5a\xc6\xcf\x6a\xd5\x20\x87\x94\x77\x23\x23\x37\xfd\x4c\xce\x8c\x8b\x2f\xd5\xa3\xc0\x1b\x4c\xc6\x45\xf3\x62\xf8\x0a\xd6\x6a\x93\x11\x73\xb5\x94\xcc\x69\xf6\xb7\x2f\x37\x59\x4f\xa3\x0d\xea\x1e\x5b\x03\xf4\xb5\xed\x3c\xc4\x93\x27\xe4\x56\xe9\x9c\x5c\x04\x4a\x9a\x32\xc9\xb9\x3d\x79\x62\x57\xa7\xd4\x37\xee\xd0\x1e\x1f\x51\x1a\x6d\xa9\x25\x6c\xa9\x30\x38\x7f\xf6\xd4\xc6\x6e\xbf\xf6\x54\x94\xf8\xff\x78\x70\x91\x03\x83\x92\x2d\x3b\x37\xe3\x62\xf0\x52\x37\xfb\x06\xa4\xce\x7b\x7f\xe9\x55\x89\xcb\xae\xba\xb8\xfc\x8b\xfc\x13\x93\x7b\x95\x3e\xa1\x25\xff\x1e\xa7\xe9\x52\xa8\xa7\x55\xab\xb5\x24\x07\x13\x85\x21\xb9\x14\x2a\xa5\x8e\xb6\x60\xa7\x8c\xbd\x24\xe1\xc1\x90\x61\x21\xd6\x10\x94\x4c\x85\x32\x38\x20\x1a\xf7\x76\x1c\x0b\xc6\xc5\x48\x3e\x29\x29\xb1\x32\xf0\x1e\xd8\xb0\xc8\x86\x88\x7a\xe1\xba\x79\xf3\x4a\xc0\xfa\x52\x66\x51\xba\x32\xc0\xbd\x0d\x18\xb5\x74\xe4\xb4\x6e\x82\xe4\x11\x62\xf8\xdb\xfd\x97\x5f\x82\x82\x6a\x83\xcb\xda\x6e\x8c\xb8\xa2\xd6\x0d\x20\x77\x67\xf4\x97\xa7\xee\x12\x30\xcd\x00\x66\x6f\x24\x23\xa5\x17\x40\x61\x70\xc6\x71\x33\x0f\xcf\xf8\xed\x5f\x04\xe6\xdd\x4e\x4d\x53\x25\x8d\x12\x18\x08\x95\x2d\xc9\x3f\xe4\x93\x54\x07\xe9\xaf\xc0\x11\x10\xb8\x84\x26\x87\x89\xbf\xb3\x7b\x13\x86\x70\x8f\x92\x01\x85\x27\xc4\xc2\x3d\xda\xf6\x08\xcc\x7b\xde\x21\x1c\x30\x31\xbe\xba\x00\xf7\xa8\x8f\x70\xb5\x36\x60\x15\xa0\x34\xa5\x46\xa7\x31\xf6\x95\x76\xb5\x61\x2c\x3d\x1a\xa0\xa9\xe5\x7b\x0c\x06\x7a\x06\xed\x4f\xee\x51\xb8\xa7\x62\xd9\x94\xc2\x72\x4a\x56\xd7\x68\x84\x0c\x41\xbd\xbc\x75\x6f\x8a\xf5\xba\x3f\x62\xa6\xac\x8d\xeb\xf6\x37\x55\x6a\x48\xb4\x3a\x18\x74\xf7\x6a\x34\x20\x95\x05\x53\x16\x85\xd2\xb6\x6b\x24\x43\x06\x93\xab\x26\xcd\x3f\x40\xfc\xfb\xe2\x6e\xb1\x09\xab\xdf\xd6\x16\x1b\x37\xfb\xfc\x6f\x6c\x8c\xef\x81\xb3\xd8\xdf\xf3\xef\x36\x21\xe3\x7b\x2f\x76\x43\xcd\xcb\xfd\x74\xab\x1e\x26\x1b\x2e\x8b\xb2\xff\x76\x21\x5e\xa3\xfa\x72\xaf\xab\x98\xfc\xf1\x86\x40\x21\x68\x8a\x3b\x25\x18\xea\x98\x3c\xb8\xda\x3a\xba\xfc\x9b\x26\xa2\x92\x41\xa1\xd1\x18\xf0\xef\x6b\xb7\x2b\x8e\xaa\x20\x08\x88\xff\xdd\xa2\x7a\x5c\x85\x3e\x8b\xd0\x45\xaf\xbe\xaa\x84\x37\x61\xf5\xa3\xe1\x7f\x03\x00\x00\xff\xff\x32\xa2\x74\x35\x45\x14\x00\x00")

func publicIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_publicIndexHtml,
		"public/index.html",
	)
}

func publicIndexHtml() (*asset, error) {
	bytes, err := publicIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/index.html", size: 5189, mode: os.FileMode(420), modTime: time.Unix(1471967966, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"public/index.html": publicIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"public": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{publicIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

