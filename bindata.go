// Code generated by go-bindata.
// sources:
// public/index.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _publicIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x58\x69\x6f\xdc\x36\x13\xfe\xee\x5f\x31\x61\xf0\x06\xeb\x38\x2b\xf9\xca\x8b\x44\x5e\x6d\x91\x3a\x41\xdd\x22\x17\x60\x17\x45\x50\xf4\x03\x25\xce\x6a\x69\x53\xa4\x40\x52\xbb\xeb\x04\xfe\xef\x05\x75\x5f\xeb\xe6\xf8\x12\x7a\x38\xc7\xf3\x0c\x87\xc3\x59\x2d\x9e\xbc\xfd\x74\x79\xf3\xe5\xf3\x3b\x58\xdb\x54\x2c\x0f\x16\xee\x3f\x10\x54\x26\x21\x41\x49\x9c\x00\x29\x5b\x1e\x00\x2c\x2c\xb7\x02\x97\x57\xd4\xac\xf9\xe5\x9a\xda\x85\x5f\x0a\xdc\x96\x89\x35\xcf\x2c\xd8\xfb\x0c\x43\x62\x71\x67\xfd\x5b\xba\xa1\xa5\x94\x38\x0d\x80\x2d\x97\x4c\x6d\x3d\x25\x85\xa2\x0c\x42\x58\xe5\x32\xb6\x5c\x49\x98\x1d\xc2\xb7\x42\xc3\xfd\xdb\x50\x0d\xb1\x92\xf2\xa2\x27\x49\x4d\x02\x21\x30\x15\xe7\x29\x4a\xeb\x25\x68\xdf\x09\x74\xcb\x5f\xef\x7f\x67\xb3\x22\x20\x39\xec\x9b\x08\xf5\xa8\x89\x50\x89\xb3\x68\x4c\x1a\x34\x34\xcb\x50\xb2\xf7\x2a\x99\x71\x8b\x69\x17\x5a\xe9\x97\xa9\xeb\x58\x2b\x21\x20\x74\x21\x3c\x53\xfc\x71\xa3\x32\x08\xc3\xae\xe4\x0a\x79\xb2\xb6\x30\x2f\x44\xb1\xe0\x28\x6d\x29\xba\xe8\xf8\x73\x7b\x65\xbc\xcb\x35\x17\xac\x8c\xd8\x55\xe0\x2b\x98\xd5\x01\xfb\x50\x60\x18\xfd\x47\x63\x3f\x1c\xb4\xab\x71\x16\x18\x37\x99\xa0\xf7\x6f\xa4\x54\xb9\x8c\x71\xa6\xa2\xdb\x71\x2a\x68\xb5\xdb\xcd\x73\xac\x91\x5a\xac\x52\x3d\x23\x8c\x6f\x48\x8f\x51\x6d\xe3\xc5\x82\x1a\xf3\x91\xa6\x08\x47\x21\x90\x5a\x4c\x26\x75\xb9\x94\xa8\x6f\x70\x67\x21\x04\x15\xdd\x7a\x29\x1a\x43\x13\xec\xe9\x36\xc7\x56\x5b\x1d\x7e\x0f\xc1\x0f\xa5\xa7\x69\x7e\x3c\x4d\x1e\xa1\xc6\xd3\xa4\x4f\x8d\xa7\xc9\x80\x55\xa2\xe9\x86\x5a\xaa\xc9\x50\xcd\xe8\x18\x42\x20\x6b\x6b\xb3\xc0\xf7\xb7\xdb\xad\x57\xab\x7a\xb1\x4a\xfd\x72\xe9\x93\xa3\x82\x2c\x7b\x79\x44\x7e\x31\xe1\xf9\xab\x67\x2c\xe4\x0c\xa5\xe5\xb1\x92\xcf\x74\xf8\xf9\xb7\x91\xdf\x75\x79\xf2\x21\x90\xf3\x57\xa3\xcd\x2d\x67\x76\xdd\xec\x0d\xb8\xe6\x06\xb5\x74\xb8\xf7\x13\x36\x19\x95\x7d\xc6\xb5\xd1\x80\x76\x2d\x26\x93\xba\xc3\xc3\xac\x37\x46\x90\x5c\x93\x90\xb8\x85\xb7\xd4\xe2\xac\x17\xd7\xed\x5a\x9e\xa2\xb1\x34\xcd\x1e\x41\xec\x74\xfa\x88\x1b\xab\x01\xe4\x46\x4e\xa6\xb5\x0d\xda\x37\xd6\x6a\x1e\xe5\x16\x67\x84\x51\x8b\x85\xef\x17\xc0\xf6\xb8\xef\xb2\x04\xe6\x59\xf5\x5e\xc5\x54\xe0\x0d\x4f\xf1\xda\x6a\x2e\x93\xd9\xe1\x88\x70\x55\xd6\x3f\x72\x9d\x2a\x93\x01\x9b\x4a\x4a\xa6\x34\xf7\xde\xa5\x21\x18\xf3\x58\xf1\x8f\x81\x98\x61\xf1\xa7\x26\xe9\x97\x99\x53\xe9\x75\xbb\x34\x19\xb9\xe8\xee\xd7\x85\xf1\xa8\x52\x93\xf1\x47\xb5\x2a\x92\xfd\x94\xb7\x2d\x23\x35\x5d\x24\x9d\x76\xb1\xf7\xf9\x58\x29\x9d\x92\x43\x4f\x49\x93\x47\x29\xb7\x7b\x9f\xb3\xb2\x85\x3f\x71\x2f\xda\xb0\x7f\x6b\xb4\xb9\x96\xb0\xa2\xc2\xe0\x74\x63\xae\x8c\x1d\x99\x0d\x15\x39\xfe\x8c\x07\x17\xd9\x33\x28\xd9\xac\x75\x33\xcc\x54\x21\x75\x8d\xa1\x57\x30\xd3\xde\x1f\x3a\x29\x74\xe8\xca\x57\xfd\x6f\xf2\x17\x46\xd7\x2a\xbe\x43\x4b\xfe\x19\xc2\x74\x10\xaa\xab\xdc\x68\xcd\xc8\xd6\x04\xbe\x4f\x8e\x84\x8a\xa9\x4b\x9b\xb7\x56\xc6\x1e\x11\x7f\x6b\xfa\x75\x55\x31\x50\x32\x16\xca\x60\x2f\xcf\xb8\xb1\xc3\x50\x55\xdf\xb6\x98\xfe\x48\xed\x16\x5c\x2c\xa6\xe5\xdd\xb8\xba\xf9\xf0\xde\x25\x63\x11\x2d\x2f\x95\x94\x58\x46\x2b\xc2\x33\x6f\xe1\x47\x4b\x32\xb4\x1d\x8c\x0c\xfd\xed\x87\x49\x36\xed\x55\xff\x0e\x3e\xb1\x92\x16\xa5\x2b\x32\xdc\x58\x8f\x51\x4b\x7b\x75\x5c\xab\xa9\xe8\x16\x42\xf8\xe3\xfa\xd3\x47\x2f\xa3\xda\xe0\xac\xb2\x3b\x1c\x69\xbb\x83\x73\x77\xdf\x8d\x6b\xc5\xdc\xd2\xbe\xbf\x63\x04\x30\x39\x0c\x0c\x94\x1e\x00\x85\xc1\x09\xc7\x75\x2b\x7a\xc4\x6f\xf7\x0d\x9e\x76\x3b\x36\x8d\x95\x34\x4a\xa0\x27\x54\x32\x23\x7f\xca\x3b\xa9\xb6\xb2\x98\x3e\x03\x20\x70\x04\x35\x86\x91\xbf\x7d\x47\x33\x11\xe8\x67\x2a\x69\xb2\x8a\xbe\xa8\x5c\x43\xa4\xd5\xd6\xa0\x1b\x1f\xd1\x80\x54\x16\x4c\x9e\x65\x4a\xdb\xf6\x4a\x98\x71\x71\xed\x2d\xac\x92\x47\x81\x7f\xe1\x97\x53\xf6\xf2\xa0\x98\xc3\xed\xbd\xc0\xee\x18\x1e\x1b\x53\xcd\xdf\xc5\x5c\x5f\x13\x54\x1b\xd4\x2b\xa1\xb6\x01\xac\x39\x63\xd8\x8c\xdb\x91\xda\xcd\x0d\xff\xca\x65\x12\x40\xa4\x34\x43\x3d\x8f\xd4\xae\xde\x2d\xc7\x8b\x00\x4e\x8e\x8f\xff\x57\xcb\x8a\xa9\xa2\x2b\xaa\xda\xe7\xf3\x17\xf0\x3c\x88\x70\xa5\x34\xba\x15\x5d\x59\xd4\x4d\xf8\x6e\x18\x2e\xd7\xa8\xb9\xed\x19\x47\x8a\xdd\x37\xca\x2b\x25\xed\x7c\x45\x53\x2e\xee\x03\xb8\x42\xb1\x41\xcb\x63\x7a\xf1\x1f\x4c\x32\xca\x58\xe1\xff\xec\x38\xdb\x0d\x84\xf3\x48\x59\xab\xd2\x02\x75\xbb\x99\x52\x9d\x70\x19\xc0\xf1\x5e\x6a\x53\x19\xa8\x10\x3f\x75\xbf\x37\x1a\x7a\x34\xbe\x4b\xb4\xca\x25\x0b\x60\xbb\xe6\x16\xf7\x86\x98\xca\x68\xa9\xd4\x60\x3c\xed\x40\x6c\xc9\xd2\xdc\xaa\x1e\x00\xcf\x3d\xd8\xdf\x86\xe4\x5f\x66\xbb\x36\xd8\xc0\xf1\x59\xeb\x37\x16\x48\xb5\x3b\x71\xbb\xee\x3b\xad\xc7\xd2\xf6\x30\x84\xa2\x36\x00\x81\x2b\x3b\x70\xab\x6b\x26\xad\xdb\xb2\x82\x02\x38\xc9\x76\x60\x94\xe0\x0c\x9e\xbe\x7e\xfd\xba\xbf\x3b\xd7\x94\xf1\xdc\x04\x70\x3e\x3a\xa6\x00\x4e\x6b\x59\x8d\xa7\xf9\xc9\xd1\x2b\x0e\xc3\xbf\x62\x00\x27\xa7\xad\x87\x52\xec\x2e\x43\x00\xdc\x52\xc1\xe3\x7a\xc7\xdd\x8a\x39\x15\x3c\x91\x01\xc4\x28\x2d\xea\x51\xd4\x93\xf3\x36\x6b\x75\xe0\x66\x3e\xae\x03\xc7\x4a\x28\x1d\xc0\xd3\xb3\xb3\xb3\xda\x41\xd5\xcf\x5c\x49\x0b\x2e\x71\x1e\x09\x15\xdf\xf5\x10\x6d\xab\xe3\x8e\x94\x60\x83\xf4\x59\x95\xf5\x8e\xa4\x9f\xd5\xf3\xd1\x46\x7d\x8a\x2f\x87\x29\x6a\x07\xe3\x21\x54\x4a\xe9\xc5\x77\xa4\xad\x06\x29\x95\x4e\xa9\x18\x14\x59\xf5\x6e\x7d\x1b\x52\xee\x70\xad\x6f\x84\xcb\x74\xe7\xc6\x97\xa5\x70\xda\x96\x42\x07\xce\xfe\x52\x98\x48\xb3\xca\xad\x4b\xaf\x03\x28\x71\x9a\x90\x1d\x9f\xe9\x59\xb6\x83\x93\x57\xad\xe3\x89\xbe\x55\x34\x53\x57\x33\xcb\x83\x85\x5f\x7e\xf5\x38\x58\xb8\x56\x54\x7c\xe2\x60\x7c\x03\x9c\x85\xc5\x97\x83\xe5\xc2\x67\x7c\x53\x88\xdd\x24\x58\xc8\x8b\x91\xb0\x6c\xb5\x0b\x2e\xb3\xbc\xfb\x35\x84\x14\x1a\xe5\xca\x81\x0c\xc9\xff\xcf\x09\x64\x82\xc6\xb8\x56\x82\xa1\x0e\xc9\x8d\x7b\x32\xef\xdd\x53\x51\xe7\x98\x4a\x06\x99\x46\x63\xa0\x28\x53\xb0\x0a\xdc\x20\xe7\x79\x1e\x29\xae\xff\x4a\xc5\xb9\x01\xbf\x40\xe1\xbb\xe8\xe5\xaa\x04\xbc\xf0\xcb\xcf\x39\xff\x06\x00\x00\xff\xff\x3e\x60\x33\x7b\xdf\x11\x00\x00")

func publicIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_publicIndexHtml,
		"public/index.html",
	)
}

func publicIndexHtml() (*asset, error) {
	bytes, err := publicIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/index.html", size: 4575, mode: os.FileMode(420), modTime: time.Unix(1471545198, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"public/index.html": publicIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"public": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{publicIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

