// Code generated by go-bindata.
// sources:
// public/index.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _publicIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x58\xeb\x6f\xdc\xb8\x11\xff\xee\xbf\x62\x8e\x41\x0f\xeb\x73\x56\xf2\x2b\x45\x22\xaf\x5c\x5c\x7d\x87\xfa\x8a\x5c\x12\xc0\x2e\x8a\xa0\xe8\x07\x4a\x9c\xd5\xd2\xa6\x48\x81\xa4\x76\xbd\x29\xfc\xbf\x17\xa4\xde\x8f\x75\x1e\x9f\x96\x3b\x1c\xce\xfc\x7e\xc3\x99\x21\xa9\xd5\x4f\xbf\x7d\xbc\xb9\xff\xfc\xe9\x77\xd8\xd8\x5c\x5c\x1f\xad\xdc\x0f\x08\x2a\xb3\x98\xa0\x24\x4e\x80\x94\x5d\x1f\x01\xac\x2c\xb7\x02\xaf\x6f\xa9\xd9\xf0\x9b\x0d\xb5\xab\xb0\x12\x1c\xb9\x39\x63\xf7\x02\xc1\xee\x0b\x8c\x89\xc5\x27\x1b\xa6\xc6\x10\xc8\x91\x71\x1a\x13\x93\x6a\xf4\xb6\x00\xc0\xbb\x81\xff\xf9\x21\x80\xda\xa2\x5e\x0b\xb5\x8b\x60\xc3\x19\x43\x79\x55\xcb\x13\xf5\xb4\x34\xfc\x0b\x97\x59\x04\x89\xd2\x0c\xf5\x32\x51\x4f\xcd\xec\x06\x79\xb6\xb1\x11\x9c\x9d\x9e\xfe\xa5\x91\xed\x38\xb3\x9b\xbe\xe8\xf9\xc8\xff\xfc\xf2\x1a\x7e\x89\x12\x5c\x2b\x8d\x6e\x44\xd7\x16\x75\xeb\xbe\xef\x86\xcb\x0d\x6a\x6e\x07\x8b\x13\xc5\xf6\xad\xf2\x5a\x49\xbb\x5c\xd3\x9c\x8b\x7d\x04\xb7\x28\xb6\x68\x79\x4a\xaf\xbe\xc2\xa4\xa0\x8c\x79\xfb\x17\xa7\xc5\xd3\x48\xb8\x4c\x94\xb5\x2a\xf7\xa8\xbb\xc9\x9c\xea\x8c\xcb\x08\x4e\x0f\x52\x9b\x8b\x40\x8d\xf8\x95\x50\x59\x47\x8f\xa6\x8f\x99\x56\xa5\x64\x11\xec\x36\xdc\xe2\x41\x17\x73\x11\xad\x94\x5a\x8c\xe7\x3d\x88\x1d\x59\x5a\x5a\x35\x00\x10\xe4\xa6\x03\xd0\x92\x7f\x53\x3c\x75\xce\x46\x86\x2f\x3a\xbb\xa9\x40\xaa\xdd\x8e\xdb\xcd\xd0\x68\xa6\xe9\x96\x5a\xda\xed\xdc\x5a\x28\x6a\x23\x10\xb8\xb6\x23\xb3\xba\x61\xd2\x99\xad\x32\x28\x82\xb3\xe2\x09\x8c\x12\x9c\xc1\xab\x77\xef\xde\x0d\x67\x97\x9a\x32\x5e\x9a\x08\x2e\x27\xdb\x14\xc1\x79\x23\x6b\xf0\x50\x29\x55\x29\x53\x1c\x26\x87\xe1\x5f\x30\x82\xb3\xf3\xce\x42\x25\x76\xb5\x11\x01\xb7\x54\xf0\xb4\x99\x71\x45\xb2\xa4\x82\x67\x32\x82\x14\xa5\x45\x3d\xf1\x7a\x76\xd9\x45\xad\x71\x5c\x1a\xd4\x92\xe6\x9d\xe3\x54\x09\xa5\x23\x78\x75\x71\x71\xd1\x18\x60\xdc\x14\x82\xee\x5d\x4a\x0b\x2e\x71\x99\x08\x95\x3e\x0e\x10\xed\xea\xed\x4e\x94\x60\xa3\xf0\x59\x55\x0c\xb6\x64\x18\xd5\xcb\xc9\x44\xb3\x8b\x6f\xc6\x21\xb2\x3c\x47\x63\x69\x5e\x4c\xa0\x52\x4a\xaf\xbe\x21\x6c\x0d\x48\xa9\x74\x4e\xc5\x28\xc9\xd0\x18\x9a\x75\x51\x68\x29\xf7\xb8\x36\x15\xe1\x22\xdd\xab\xf8\x2a\x15\xce\xbb\x54\x60\x8c\x7d\x3d\x15\x66\xc2\xac\x4a\xeb\xc2\xeb\x00\x4a\x9c\x27\x64\xa7\x7b\x7a\x51\x3c\xc1\xd9\xdb\xce\xf0\xa1\xbe\xe5\x61\x47\x6b\x95\x96\xe6\x25\xf0\x6d\x2c\x9f\x5d\x17\x0e\x7d\xaa\xd5\x1d\x39\xd5\xbc\xb0\xfd\x96\xfc\x40\xb7\xb4\x92\xd6\xad\x78\xc7\x25\x53\xbb\x40\x49\xa1\x28\x83\x18\xd6\xa5\x4c\x2d\x57\x12\x16\xc7\xad\x4f\x80\x2d\xd5\x90\x2a\xd9\x76\xb4\x4a\xe2\xca\x3c\x06\xa6\xd2\x32\x47\x69\x83\x0c\xed\xef\x02\xdd\xf0\xef\xfb\x3f\xd8\xc2\x3b\x24\xc7\xc3\x25\xae\x35\xbd\xb0\x44\xa8\xcc\xad\x68\x97\xb4\x68\x68\x51\xa0\x64\xef\x55\xb6\xe0\x16\xf3\x3e\xb4\xca\x2e\x53\x77\xa9\x56\x42\x40\xec\x5c\x04\xc6\xff\xb9\x57\x05\xc4\x71\x5f\x72\xeb\xf3\x09\x96\x5e\x94\x0a\x8e\xd2\x56\xa2\xab\x9e\x3d\x37\x57\xf9\xbb\xd9\x70\xc1\x2a\x8f\x7d\x05\xbe\x86\x45\xe3\x70\x08\x05\xc6\xde\xbf\xd7\xf7\xf3\x51\x37\x9a\x46\xa1\x4e\xf1\x5f\xeb\xce\xb3\x50\xc9\xc3\x34\x14\x6d\x5f\xea\xc5\x39\xd5\x48\x2d\xd6\xa1\x5e\x10\xc6\xb7\x64\xc0\xa8\x59\x13\xa4\x82\x1a\xf3\xc1\x35\x97\x93\x18\x48\x23\x26\xb3\xba\x5c\x4a\xd4\xf7\xae\xb2\x62\x50\xc9\x43\x53\x90\x03\xdd\x76\xdb\x9a\x55\xc7\xdf\x42\xf0\xcf\xca\xd2\x3c\x3f\x9e\x67\x2f\x50\xe3\x79\x36\xa4\xc6\xf3\x6c\xc4\xaa\x39\x48\xc8\x58\xcd\xe8\x14\x62\x20\x1b\x6b\x8b\x28\x0c\x77\xbb\x5d\x7b\xe6\x04\xa9\xca\xc3\x6a\x18\x92\x13\x4f\x96\xbd\x39\x21\x7f\x33\xf1\xe5\xdb\x9f\x59\xcc\x19\x4a\xcb\x53\x25\x7f\xd6\xf1\xa7\x7f\x4c\xec\x56\x27\xab\x33\x7d\xf9\x76\x32\xe9\x8b\xbf\x9d\x1b\x71\x6d\x5b\xfd\x61\xc2\xa6\xa0\x72\xc8\xb8\x59\x34\xa2\xdd\x88\xc9\xac\xee\x78\x33\x9b\x89\x09\x24\xd7\x24\x24\xee\xe0\x37\x6a\x71\x31\xf0\xeb\x66\xbb\x8e\x7f\x18\xb1\xd3\x19\x22\x6e\x57\x8d\x20\xb7\x72\x32\xaf\x6d\xd0\xfe\x6a\xad\xe6\x49\x69\x71\x41\x18\xb5\xe8\x6d\xbf\x06\x76\xc0\x7c\x9f\x25\xb0\xc0\xaa\xf7\x2a\xa5\x02\xef\x79\x8e\x77\x56\x73\x99\x2d\x8e\x27\x84\x9b\x73\xe6\x3b\xca\xa9\x5e\x32\x62\x53\x4b\xc9\x9c\xe6\xc1\x5a\x1a\x83\x31\x2f\x25\xff\x14\x88\x19\x27\x7f\x6e\xb2\x61\x9a\x39\x95\x41\xb7\xcb\xb3\x89\x89\xfe\x7c\x93\x18\x2f\x2a\xb5\x11\x7f\x51\xab\x26\x39\x0c\x79\xd7\x32\x72\xd3\x47\xd2\x6b\x17\x07\x8f\x8f\xb5\xd2\x39\x39\x0e\x94\x34\x65\x92\x73\x7b\xf0\x38\xab\x5a\xf8\x4f\xee\x44\x1b\xf7\x6f\x8d\xb6\xd4\x12\xd6\x54\x18\x9c\x6f\xcc\xf5\x62\x47\x66\x4b\x45\x89\x3f\x62\xc1\x79\x0e\x0c\x4a\xb6\xe8\xcc\x8c\x23\xe5\xa5\xae\x31\x0c\x12\x66\xde\xfa\x73\x2f\x84\x0e\x5d\x75\xaa\xff\x87\xfc\x1b\x93\x3b\x95\x3e\xa2\x25\xff\x1d\xc3\x74\x10\xea\x52\x6e\xb5\x16\x64\x67\xa2\x30\x24\x27\x42\xa5\xd4\x85\x2d\xd8\x28\x63\x4f\x48\xb8\x33\xc3\xbc\xaa\x19\x28\x99\x0a\x65\x70\x10\x67\xdc\xda\xb1\xab\xba\x6f\x5b\xcc\xbf\x27\x77\x3d\x17\x8b\x79\x55\x1b\xb7\xf7\x7f\xbe\x77\xc1\x58\x25\xd7\x37\x4a\x4a\xac\xbc\x79\xf7\x2c\x58\x85\xc9\x35\x19\xaf\x1d\x5d\x19\x86\xd3\xcf\xb3\x6c\xba\x52\xff\x06\x3e\xa9\x92\x16\xa5\x4b\x32\xdc\xda\x80\x51\x4b\x07\x79\xdc\xa8\xa9\xe4\x01\x62\xf8\xe7\xdd\xc7\x0f\x41\x41\xb5\xc1\x45\xbd\xee\x78\xa2\xed\x36\xce\xd5\xbe\xbb\xae\xf9\x7b\x4b\x77\xfe\x4e\x11\xc0\xec\x65\x60\xa4\xf4\x0c\x28\x0c\xce\x18\x6e\x5a\xd1\x0b\x76\xfb\x67\xf0\xbc\xd9\xe9\xd2\x54\x49\xa3\x04\x06\x42\x65\x0b\xf2\x2f\xf9\x28\xd5\x4e\xfa\xdb\x67\x04\x04\x4e\xa0\xc1\x30\xb1\x37\xde\x9a\xc1\xff\x30\x84\x3b\x94\x0c\x28\x3c\x22\x16\xee\xbd\xb4\x45\x60\xde\xf2\x06\x61\x87\x89\xf1\xb9\x0b\xb8\x45\xbd\x87\xb3\x53\x03\x56\x01\x4a\x53\x6a\x74\x1a\x63\x5b\x69\x97\x3d\xc6\xd2\xbd\x01\x9a\x5a\xbe\xc5\x60\xa0\x67\xd0\xfe\xe1\xde\x63\x5b\x2a\x16\x4d\x2a\x2c\xa6\xc1\xea\xca\x98\x90\x21\xa9\xe7\xd7\xee\x3a\x7f\x7a\xda\x6f\x60\xd3\xa8\xfd\x48\x59\xcc\x96\xc4\x67\x55\x6a\x48\xb4\xda\x19\x74\x77\x61\x34\x20\x95\x05\x53\x16\x85\xd2\xb6\xab\x6f\x33\xad\x94\x83\x55\x52\x6d\x8a\xaf\x93\x55\x58\x3d\x19\xae\x8f\x56\x61\xf5\x25\xe8\x68\x95\x28\xb6\xf7\x5f\x84\x18\xdf\x02\x67\xb1\xbf\xba\x5f\xaf\x42\xc6\xb7\x5e\xec\x5a\xb1\x97\xfb\x9e\x5c\xbd\x35\x56\x5c\x16\x65\xff\x39\x42\xbc\x46\x35\x72\x0f\xa6\x98\xfc\xf5\x92\x40\x21\x68\x8a\x1b\x25\x18\xea\x98\xdc\xbb\x9c\xdd\x3b\x7a\x4d\x71\x52\xc9\xa0\xd0\x68\x0c\xf8\x27\xb3\xdb\x6d\xb7\x05\x41\x10\x10\xff\x29\xa2\x7a\x2f\x85\x1e\x45\xe8\xbc\x57\xa3\x0a\xf0\x2a\xac\x3e\x71\xfd\x3f\x00\x00\xff\xff\x32\xaf\x40\x88\xf3\x12\x00\x00")

func publicIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_publicIndexHtml,
		"public/index.html",
	)
}

func publicIndexHtml() (*asset, error) {
	bytes, err := publicIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/index.html", size: 4851, mode: os.FileMode(420), modTime: time.Unix(1471966922, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"public/index.html": publicIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"public": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{publicIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

